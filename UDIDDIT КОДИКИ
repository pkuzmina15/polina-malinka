A

Create table "users" (
"id" SERIAL PRIMARY KEY,
login_date TIMESTAMP,
"username" VARCHAR(25) NOT NULL,
"password" VARCHAR,
CONSTRAINT "unique_name" UNIQUE ("username"),
CONSTRAINT "not_empty" CHECK (LENGTH(TRIM("username")) > 0)
);
CREATE UNIQUE INDEX ON "users" (username);


B

Create table "topics" (
"id" SERIAL PRIMARY KEY,
"name" VARCHAR(30) NOT NULL,
"description" VARCHAR(500),
CONSTRAINT "not_empty" CHECK (LENGTH(TRIM("name")) > 0),
CONSTRAINT "unique_topic" UNIQUE ("name")
);
CREATE UNIQUE INDEX ON "topics" (name);

C

Create table "posts" (
"id" SERIAL PRIMARY KEY,
"title" VARCHAR(100) NOT NULL,
"url" VARCHAR(4000),
"content" TEXT,
post_data TIMESTAMP,
"topic_id" INTEGER NOT NULL
REFERENCES "topics" (id) on delete CASCADE,
"user_id" INTEGER NOT NULL
REFERENCES "users" (id) on delete set null,
CONSTRAINT "not_empty" CHECK (LENGTH(TRIM("title")) > 0),
CONSTRAINT "check_content" CHECK(LENGTH(trim("url"))>0 and LENGTH(trim("content"))=0
OR LENGTH(trim("url"))=0 and LENGTH(trim("content"))>0)
);
Create index on "posts" (url);

D

CREATE table "comments" (
"id" SERIAL PRIMARY KEY,
"content" TEXT NOT NULL,
"hierarchy_comment" INTEGER REFERENCES "comments" on delete CASCADE,
comment_data  TIMESTAMP,
"post_id" INTEGER NOT NULL REFERENCES "posts" (id) on delete CASCADE,
"user_id" INTEGER NOT NULL REFERENCES "users" (id) on delete set null,
CONSTRAINT "not_empty" CHECK (LENGTH(TRIM("content")) > 0)
);


E

CREATE TABLE "likes" (
"id" SERIAL PRIMARY KEY,
"vote" SMALLINT NOT NULL,
"post_id" INTEGER NOT NULL REFERENCES "posts" (id) on delete CASCADE,
"user_id" INTEGER NOT NULL REFERENCES "users" (id) on delete set null,
CONSTRAINT "not_empty" CHECK ("vote"=-1 OR "vote"=1),
CONSTRAINT "unique" UNIQUE ("user_id", "post_id")
);



INSERT INTO "users" ("username")
select DISTINCT username from bad_posts
UNION
select DISTINCT username from bad_comments
UNION
select DISTINCT regexp_split_to_table (upvotes,',') from bad_posts
UNION
select DISTINCT regexp_split_to_table (downvotes,',') from bad_posts
;


insert into "topics" ("name")
select distinct topic from bad_posts;


insert into "posts" (
"title",
"url",
"content",
"topic_id",
"user_id")
select distinct
left(b.title,100),
b.url,
b.text_content,
t.id,
u.id
from bad_posts b
join users u
on u.username=b.username
join topics t
on t.name=b.topic;


insert into "comments" ("post_id","user_id","content")
select p.id, u.id, b.text_content
from bad_comments b
join users u
on u.username=b.username
join posts p
on p.id=b.post_id;

insert into "likes" ("user_id", "post_id", "vote"
)
with t1 as
(select id, regexp_split_to_table (upvotes,',') as up_users
from bad_posts)
select u.id, t1.id, 1
from t1
join users u
on u.username=t1.up_users;

insert into "likes" ("user_id", "post_id", "vote"
)
with t1 as
(select id, regexp_split_to_table (downvotes,',') as down_users
from bad_posts)
select u.id, t1.id, -1
from t1
join users u
on u.username=t1.down_users;
